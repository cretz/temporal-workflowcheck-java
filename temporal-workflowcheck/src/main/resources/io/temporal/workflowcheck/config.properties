#### Invalid Calls ####
# Rules for this file:
# * Every section is separated by a ### heading
# * Groups within those sections just have a simple # heading for comments
# * Should alphabetize where reasonable
# * Always fully qualify classes of methods

### Random ###
temporal.workflowcheck.invalid.java/util/Random.<init>()=true
# TODO: more

### Time ###

# All Clock and InstantSource calls disallowed
temporal.workflowcheck.invalid.java/time/Clock=true
temporal.workflowcheck.invalid.java/time/InstantSource=true

# Any accessing current time is disallowed
temporal.workflowcheck.invalid.java/lang/System.currentTimeMillis=true
temporal.workflowcheck.invalid.java/lang/System.nanoTime=true
temporal.workflowcheck.invalid.java/time/Clock.system=true
temporal.workflowcheck.invalid.java/time/Clock.systemDefaultZone=true
temporal.workflowcheck.invalid.java/time/Clock.systemUTC=true
temporal.workflowcheck.invalid.java/time/Clock.tickMillis=true
temporal.workflowcheck.invalid.java/time/Clock.tickMinutes=true
temporal.workflowcheck.invalid.java/time/Clock.tickSeconds=true
temporal.workflowcheck.invalid.java/time/Instant.now=true
temporal.workflowcheck.invalid.java/time/LocalDate.now=true
temporal.workflowcheck.invalid.java/time/LocalDateTime.now=true
temporal.workflowcheck.invalid.java/time/LocalTime.now=true
temporal.workflowcheck.invalid.java/time/OffsetDateTime.now=true
temporal.workflowcheck.invalid.java/time/OffsetTime.now=true
temporal.workflowcheck.invalid.java/time/ZonedDateTime.now=true
temporal.workflowcheck.invalid.java/util/Calendar.getInstance=true
temporal.workflowcheck.invalid.java/util/Date.<init>()=true

### Collections ###

# Disallow iteration over high-level collection without it being a safer type.
# We expect many may disable this overly strict rule. We also expect
# LinkedHashSet/Map and SortedSet/Map to be those specific types when asking
# for iterators.

temporal.workflowcheck.invalid.java/lang/Iterable.forEach=true
temporal.workflowcheck.invalid.java/lang/Iterable.iterator=true
temporal.workflowcheck.invalid.java/lang/Iterable.spliterator=true
temporal.workflowcheck.invalid.java/util/Collection.parallelStream=true
temporal.workflowcheck.invalid.java/util/Collection.stream=true
temporal.workflowcheck.invalid.java/util/Collection.toArray=true

# Many collections are safe
temporal.workflowcheck.invalid.java/util/LinkedHashMap=false
temporal.workflowcheck.invalid.java/util/List=false
temporal.workflowcheck.invalid.java/util/SortedMap=false
temporal.workflowcheck.invalid.java/util/SortedSet=false

### System (disk, network, OS, etc)
temporal.workflowcheck.invalid.java/io/File=true
temporal.workflowcheck.invalid.java/io/FileInputStream=true
temporal.workflowcheck.invalid.java/io/FileOutputStream=true
temporal.workflowcheck.invalid.java/io/FileReader=true
temporal.workflowcheck.invalid.java/io/FileWriter=true
temporal.workflowcheck.invalid.java/io/RandomAccessFile=true
temporal.workflowcheck.invalid.java/lang/ClassLoader.getResourceAsStream=true
temporal.workflowcheck.invalid.java/lang/System.clearProperty=true
temporal.workflowcheck.invalid.java/lang/System.console=true
temporal.workflowcheck.invalid.java/lang/System.err=true
temporal.workflowcheck.invalid.java/lang/System.exit=true
temporal.workflowcheck.invalid.java/lang/System.getenv=true
temporal.workflowcheck.invalid.java/lang/System.getProperties=true
temporal.workflowcheck.invalid.java/lang/System.getProperty=true
# We usually would disallow identityHashCode since it's non-deterministic
# across processes, but a lot of simple libraries use it internally
# temporal.workflowcheck.invalid.java/lang/System.identityHashCode=true
temporal.workflowcheck.invalid.java/lang/System.in=true
temporal.workflowcheck.invalid.java/lang/System.load=true
temporal.workflowcheck.invalid.java/lang/System.loadLibrary=true
temporal.workflowcheck.invalid.java/lang/System.mapLibraryName=true
temporal.workflowcheck.invalid.java/lang/System.out=true
temporal.workflowcheck.invalid.java/lang/System.setErr=true
temporal.workflowcheck.invalid.java/lang/System.setIn=true
temporal.workflowcheck.invalid.java/lang/System.setOut=true
temporal.workflowcheck.invalid.java/lang/System.setProperties=true
temporal.workflowcheck.invalid.java/lang/System.setProperty=true
temporal.workflowcheck.invalid.java/net/DatagramSocket=true
temporal.workflowcheck.invalid.java/net/Socket=true
temporal.workflowcheck.invalid.java/net/ServerSocket=true
temporal.workflowcheck.invalid.java/net/URL.openConnection=true
temporal.workflowcheck.invalid.java/net/URL.openStream=true
temporal.workflowcheck.invalid.java/nio/channels/AsynchronousChannel=true
temporal.workflowcheck.invalid.java/nio/channels/FileChannel=true
temporal.workflowcheck.invalid.java/nio/channels/NetworkChannel=true
temporal.workflowcheck.invalid.java/nio/file/Files=true
temporal.workflowcheck.invalid.java/nio/file/FileSystem=true
temporal.workflowcheck.invalid.java/nio/file/Path.toAbsolutePath=true
temporal.workflowcheck.invalid.java/nio/file/Path.toRealPath=true
temporal.workflowcheck.invalid.java/nio/file/WatchService=true

### Threading/concurrency
temporal.workflowcheck.invalid.java/lang/Object.notify=true
temporal.workflowcheck.invalid.java/lang/Object.notifyAll=true
temporal.workflowcheck.invalid.java/lang/Object.wait=true
temporal.workflowcheck.invalid.java/lang/Thread=true
# We intentionally don't include many concurrent collections here because that
# something is thread-safe doesn't mean it's non-deterministic. There are
# plenty of non-deterministic calls (e.g. BlockingQueue.poll) that can be used
# in deterministic ways, but we are not strictly enforcing this either.
temporal.workflowcheck.invalid.java/util/concurrent/CompletableFuture=true
temporal.workflowcheck.invalid.java/util/concurrent/CountDownLatch=true
temporal.workflowcheck.invalid.java/util/concurrent/CyclicBarrier=true
temporal.workflowcheck.invalid.java/util/concurrent/Executor=true
temporal.workflowcheck.invalid.java/util/concurrent/Executors=true
temporal.workflowcheck.invalid.java/util/concurrent/ExecutorService=true
temporal.workflowcheck.invalid.java/util/concurrent/Future=true
temporal.workflowcheck.invalid.java/util/concurrent/Phaser=true
temporal.workflowcheck.invalid.java/util/concurrent/Semaphore=true
# We are being lazy and just disallowing all locks. Users can override specific
# things as needed.
temporal.workflowcheck.invalid.java/util/concurrent/locks=true

### Specific overrides ###

# Temporal workflow package is ok
temporal.workflowcheck.invalid.io/temporal/workflow=false

# We're whitelisting java.util.logging due to its heavy use
temporal.workflowcheck.invalid.java/util/logging=false

# Consider everything on Class, Throwable, and String to be acceptable due to
# so many transitive false positives (even though many times the calls are in
# fact not safe)
temporal.workflowcheck.invalid.java/lang/Class=false
temporal.workflowcheck.invalid.java/lang/String=false
temporal.workflowcheck.invalid.java/lang/Throwable=false

# Quite a few internal libraries catch interrupts just to re-interrupt, so we
# will mark thread interrupt as safe (other thread stuff is not)
temporal.workflowcheck.invalid.java/lang/Thread.currentThread=false
temporal.workflowcheck.invalid.java/lang/Thread.interrupt=false

# While technically line separators are platform specific, in practice many
# people don't run workers across platforms and this is used by lots of string
# building code.
temporal.workflowcheck.invalid.java/lang/System.lineSeparator=false